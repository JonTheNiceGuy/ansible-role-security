{# Based on latest version of the config file from https://github.com/mvo5/unattended-upgrades/blob/a0ecfba0e6e2974e01a351d788843da54234e2e6/data/50unattended-upgrades.Debian #}

// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded.
//
// Lines below have the format format is "keyword=value,...".  A
// package will be upgraded only if the values in its metadata match
// all the supplied keywords in a line.  (In other words, omitted
// keywords are wild cards.) The keywords originate from the Release
// file, but several aliases are accepted.  The accepted keywords are:
//   a,archive,suite (eg, "stable")
//   c,component     (eg, "main", "contrib", "non-free")
//   l,label         (eg, "Debian", "Debian-Security")
//   o,origin        (eg, "Debian", "Unofficial Multimedia Packages")
//   n,codename      (eg, "jessie", "jessie-updates")
//     site          (eg, "http.debian.net")
// The available values on the system are printed by the command
// "apt-cache policy", and can be debugged by running
// "unattended-upgrades -d" and looking at the log file.
//
// Within lines unattended-upgrades allows 2 macros whose values are
// derived from /etc/debian_version:
//   ${distro_id}            Installed origin.
//   ${distro_codename}      Installed codename (eg, "buster")
Unattended-Upgrade::Origins-Pattern {
        // Codename based matching:
        // This will follow the migration of a release through different
        // archives (e.g. from testing to stable and later oldstable).
        // Software will be the latest available for the named release,
        // but the Debian release itself will not be automatically upgraded.
{% if not security_autoupdate_train_updates | default('false') %}//{% endif %}      "origin=Debian,codename=${distro_codename}-updates";
{% if not security_autoupdate_train_proposed | default('false') %}//{% endif %}      "origin=Debian,codename=${distro_codename}-proposed-updates";
{% if not security_autoupdate_train_main | default('true') %}//{% endif %}        "origin=Debian,codename=${distro_codename},label=Debian";
{% if not security_autoupdate_train_security | default('true') %}//{% endif %}      "origin=Debian,codename=${distro_codename},label=Debian-Security";

        // Archive or Suite based matching:
        // Note that this will silently match a different release after
        // migration to the specified archive (e.g. testing becomes the
        // new stable).
//      "o=Debian,a=stable";
//      "o=Debian,a=stable-updates";
//      "o=Debian,a=proposed-updates";
//      "o=Debian Backports,a=${distro_codename}-backports,l=Debian Backports";
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
{% for package in security_autoupdate_blacklist %}
      "{{package}}";
{% endfor %}
//     "vim";
//     "libc6";
//     "libc6-dev";
//     "libc6-i686";
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run 
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
{% if security_autoupdate_auto_fix_interrupted_dpkg is not defined %}//{% endif %}Unattended-Upgrade::AutoFixInterruptedDpkg "{% if security_autoupdate_auto_fix_interrupted_dpkg | default('false') %}true{% else %}false{% endif %}";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGTERM. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
{% if security_autoupdate_minimal_steps is not defined %}//{% endif %}Unattended-Upgrade::MinimalSteps "{% if security_autoupdate_minimal_steps | default('false') %}true{% else %}false{% endif %}";

// Install all unattended-upgrades when the machine is shutting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
{% if security_autoupdate_install_on_shutdown is not defined %}//{% endif %}Unattended-Upgrade::InstallOnShutdown "{% if security_autoupdate_install_on_shutdown | default('true') %}true{% else %}false{% endif %}";

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
{% if security_autoupdate_mail_to is not defined %}//{% endif %}Unattended-Upgrade::Mail "{{ security_autoupdate_mail_to | default('root') }}";

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
{% if security_autoupdate_mail_on_error is not defined %}//{% endif %}Unattended-Upgrade::MailOnlyOnError "{% if security_autoupdate_mail_on_error | default('true') %}true{% else %}false{% endif %}";

// Remove unused automatically installed kernel-related packages
// (kernel images, kernel headers and kernel version locked tools).
{% if security_autoupdate_remove_unused_kernel_packages is not defined %}//{% endif %}Unattended-Upgrade::Remove-Unused-Kernel-Packages "{% if security_autoupdate_remove_unused_kernel_packages | default('false') %}true{% else %}false{% endif %}";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
{% if security_autoupdate_remove_unused_dependencies is not defined %}//{% endif %}Unattended-Upgrade::Remove-Unused-Dependencies "{% if security_autoupdate_remove_unused_dependencies | default('false') %}true{% else %}false{% endif %}"

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade 
{% if security_autoupdate_reboot is not defined %}//{% endif %}Unattended-Upgrade::Automatic-Reboot "{% if security_autoupdate_reboot | default('false') %}true{% else %}false{% endif %}";

// Automatically reboot even if there are users currently logged in.
{% if security_autoupdate_reboot_with_users is not defined %}//{% endif %}Unattended-Upgrade::Automatic-Reboot-WithUsers "{% if security_autoupdate_reboot | default('true') %}true{% else %}false{% endif %}";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
{% if security_autoupdate_reboot_time is not defined %}//{% endif %}Unattended-Upgrade::Automatic-Reboot-Time "{{ security_autoupdate_reboot_time | default('02:00') }}";

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
{% if security_autoupdate_download_limit is not defined %}//{% endif %}Acquire::http::Dl-Limit "{{ security_autoupdate_download_limit | default('70') }}";

// Enable logging to syslog. Default is False
{% if security_autoupdate_syslog_enable is not defined %}//{% endif %}Unattended-Upgrade::SyslogEnable "{% if security_autoupdate_syslog_enable | default('false') %}true{% else %}false{% endif %}";

// Specify syslog facility. Default is daemon
{% if security_autoupdate_syslog_facility is not defined %}//{% endif %}Unattended-Upgrade::SyslogFacility "{{ security_autoupdate_syslog_facility | default('daemon') }}";

// Download and install upgrades only on AC power
// (i.e. skip or gracefully stop updates on battery)
{% if security_autoupdate_on_ac_only is not defined %}//{% endif %}Unattended-Upgrade::OnlyOnACPower "{% if security_autoupdate_on_ac_only | default('true') %}true{% else %}false{% endif %}";

// Download and install upgrades only on non-metered connection
// (i.e. skip or gracefully stop updates on a metered connection)
{% if security_autoupdate_on_non_metered is not defined %}//{% endif %}Unattended-Upgrade::Skip-Updates-On-Metered-Connections "{% if security_autoupdate_on_non_metered | default('true') %}true{% else %}false{% endif %}";
